// Code generated by protoc-gen-go. DO NOT EDIT.
// source: portmap.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	portmap.proto

It has these top-level messages:
	OpenPortRequest
	ClosePortRequest
	StatusResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Protocol int32

const (
	Protocol_tcp Protocol = 0
	Protocol_udp Protocol = 1
)

var Protocol_name = map[int32]string{
	0: "tcp",
	1: "udp",
}
var Protocol_value = map[string]int32{
	"tcp": 0,
	"udp": 1,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}
func (Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Technology int32

const (
	Technology_all    Technology = 0
	Technology_natpmp Technology = 1
	Technology_upnp   Technology = 2
)

var Technology_name = map[int32]string{
	0: "all",
	1: "natpmp",
	2: "upnp",
}
var Technology_value = map[string]int32{
	"all":    0,
	"natpmp": 1,
	"upnp":   2,
}

func (x Technology) String() string {
	return proto.EnumName(Technology_name, int32(x))
}
func (Technology) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Success int32

const (
	Success_ok    Success = 0
	Success_notOk Success = 1
)

var Success_name = map[int32]string{
	0: "ok",
	1: "notOk",
}
var Success_value = map[string]int32{
	"ok":    0,
	"notOk": 1,
}

func (x Success) String() string {
	return proto.EnumName(Success_name, int32(x))
}
func (Success) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type OpenPortRequest struct {
	LocalPort    int32      `protobuf:"varint,1,opt,name=localPort" json:"localPort,omitempty"`
	ExternalPort int32      `protobuf:"varint,2,opt,name=externalPort" json:"externalPort,omitempty"`
	Protocol     Protocol   `protobuf:"varint,3,opt,name=protocol,enum=api.Protocol" json:"protocol,omitempty"`
	Lifetime     int32      `protobuf:"varint,4,opt,name=lifetime" json:"lifetime,omitempty"`
	Technology   Technology `protobuf:"varint,5,opt,name=technology,enum=api.Technology" json:"technology,omitempty"`
}

func (m *OpenPortRequest) Reset()                    { *m = OpenPortRequest{} }
func (m *OpenPortRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenPortRequest) ProtoMessage()               {}
func (*OpenPortRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpenPortRequest) GetLocalPort() int32 {
	if m != nil {
		return m.LocalPort
	}
	return 0
}

func (m *OpenPortRequest) GetExternalPort() int32 {
	if m != nil {
		return m.ExternalPort
	}
	return 0
}

func (m *OpenPortRequest) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_tcp
}

func (m *OpenPortRequest) GetLifetime() int32 {
	if m != nil {
		return m.Lifetime
	}
	return 0
}

func (m *OpenPortRequest) GetTechnology() Technology {
	if m != nil {
		return m.Technology
	}
	return Technology_all
}

type ClosePortRequest struct {
	LocalPort    int32      `protobuf:"varint,1,opt,name=localPort" json:"localPort,omitempty"`
	ExternalPort int32      `protobuf:"varint,2,opt,name=externalPort" json:"externalPort,omitempty"`
	Technology   Technology `protobuf:"varint,5,opt,name=technology,enum=api.Technology" json:"technology,omitempty"`
}

func (m *ClosePortRequest) Reset()                    { *m = ClosePortRequest{} }
func (m *ClosePortRequest) String() string            { return proto.CompactTextString(m) }
func (*ClosePortRequest) ProtoMessage()               {}
func (*ClosePortRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClosePortRequest) GetLocalPort() int32 {
	if m != nil {
		return m.LocalPort
	}
	return 0
}

func (m *ClosePortRequest) GetExternalPort() int32 {
	if m != nil {
		return m.ExternalPort
	}
	return 0
}

func (m *ClosePortRequest) GetTechnology() Technology {
	if m != nil {
		return m.Technology
	}
	return Technology_all
}

type StatusResponse struct {
	Success    Success    `protobuf:"varint,1,opt,name=success,enum=api.Success" json:"success,omitempty"`
	Message    string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Technology Technology `protobuf:"varint,5,opt,name=technology,enum=api.Technology" json:"technology,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusResponse) GetSuccess() Success {
	if m != nil {
		return m.Success
	}
	return Success_ok
}

func (m *StatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StatusResponse) GetTechnology() Technology {
	if m != nil {
		return m.Technology
	}
	return Technology_all
}

func init() {
	proto.RegisterType((*OpenPortRequest)(nil), "api.OpenPortRequest")
	proto.RegisterType((*ClosePortRequest)(nil), "api.ClosePortRequest")
	proto.RegisterType((*StatusResponse)(nil), "api.StatusResponse")
	proto.RegisterEnum("api.Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("api.Technology", Technology_name, Technology_value)
	proto.RegisterEnum("api.Success", Success_name, Success_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NATservice service

type NATserviceClient interface {
	OpenPort(ctx context.Context, in *OpenPortRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ClosePort(ctx context.Context, in *ClosePortRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type nATserviceClient struct {
	cc *grpc.ClientConn
}

func NewNATserviceClient(cc *grpc.ClientConn) NATserviceClient {
	return &nATserviceClient{cc}
}

func (c *nATserviceClient) OpenPort(ctx context.Context, in *OpenPortRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/api.NATservice/OpenPort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nATserviceClient) ClosePort(ctx context.Context, in *ClosePortRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/api.NATservice/ClosePort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NATservice service

type NATserviceServer interface {
	OpenPort(context.Context, *OpenPortRequest) (*StatusResponse, error)
	ClosePort(context.Context, *ClosePortRequest) (*StatusResponse, error)
}

func RegisterNATserviceServer(s *grpc.Server, srv NATserviceServer) {
	s.RegisterService(&_NATservice_serviceDesc, srv)
}

func _NATservice_OpenPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NATserviceServer).OpenPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NATservice/OpenPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NATserviceServer).OpenPort(ctx, req.(*OpenPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NATservice_ClosePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NATserviceServer).ClosePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NATservice/ClosePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NATserviceServer).ClosePort(ctx, req.(*ClosePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NATservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.NATservice",
	HandlerType: (*NATserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenPort",
			Handler:    _NATservice_OpenPort_Handler,
		},
		{
			MethodName: "ClosePort",
			Handler:    _NATservice_ClosePort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portmap.proto",
}

func init() { proto.RegisterFile("portmap.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4f, 0x6e, 0x13, 0x31,
	0x14, 0xc6, 0xe3, 0xa4, 0x49, 0x26, 0x8f, 0x36, 0x35, 0x0f, 0x90, 0x46, 0x51, 0x16, 0xd5, 0x2c,
	0x50, 0x19, 0xa4, 0x8c, 0x14, 0x76, 0xdd, 0x21, 0x16, 0x48, 0x2c, 0x68, 0x35, 0xed, 0x05, 0x8c,
	0x79, 0x84, 0x51, 0x1d, 0x3f, 0x33, 0xf6, 0x20, 0xd8, 0x82, 0x38, 0x01, 0x27, 0xe0, 0x3c, 0x2c,
	0xb9, 0x02, 0x07, 0x41, 0x71, 0x32, 0x53, 0x5a, 0xb1, 0x89, 0xc4, 0xce, 0xfe, 0xfc, 0xf9, 0xa7,
	0xef, 0xfd, 0x81, 0x23, 0xc7, 0x75, 0x58, 0x2b, 0xb7, 0x70, 0x35, 0x07, 0xc6, 0x81, 0x72, 0xd5,
	0x6c, 0xbe, 0x62, 0x5e, 0x19, 0x2a, 0x94, 0xab, 0x0a, 0x65, 0x2d, 0x07, 0x15, 0x2a, 0xb6, 0x7e,
	0x6b, 0xc9, 0x7e, 0x0a, 0x38, 0x3e, 0x77, 0x64, 0x2f, 0xb8, 0x0e, 0x25, 0x7d, 0x68, 0xc8, 0x07,
	0x9c, 0xc3, 0xc4, 0xb0, 0x56, 0x66, 0xa3, 0xa5, 0xe2, 0x44, 0x9c, 0x0e, 0xcb, 0x1b, 0x01, 0x33,
	0x38, 0xa4, 0x4f, 0x81, 0x6a, 0xbb, 0x33, 0xf4, 0xa3, 0xe1, 0x96, 0x86, 0x4f, 0x20, 0x89, 0x78,
	0xcd, 0x26, 0x1d, 0x9c, 0x88, 0xd3, 0xe9, 0xf2, 0x68, 0xa1, 0x5c, 0xb5, 0xb8, 0xd8, 0x89, 0x65,
	0xf7, 0x8c, 0x33, 0x48, 0x4c, 0xf5, 0x8e, 0x42, 0xb5, 0xa6, 0xf4, 0x20, 0xa2, 0xba, 0x3b, 0x16,
	0x00, 0x81, 0xf4, 0x7b, 0xcb, 0x86, 0x57, 0x9f, 0xd3, 0x61, 0x04, 0x1d, 0x47, 0xd0, 0x55, 0x27,
	0x97, 0x7f, 0x59, 0xb2, 0x6f, 0x02, 0xe4, 0x0b, 0xc3, 0x9e, 0xfe, 0x6f, 0x39, 0x7b, 0xe7, 0xf8,
	0x2a, 0x60, 0x7a, 0x19, 0x54, 0x68, 0x7c, 0x49, 0xde, 0xb1, 0xf5, 0x84, 0x8f, 0x61, 0xec, 0x1b,
	0xad, 0xc9, 0xfb, 0x98, 0x61, 0xba, 0x3c, 0x8c, 0x80, 0xcb, 0xad, 0x56, 0xb6, 0x8f, 0x98, 0xc2,
	0x78, 0x4d, 0xde, 0xab, 0x15, 0xc5, 0x28, 0x93, 0xb2, 0xbd, 0xee, 0x9d, 0x22, 0x9f, 0x43, 0xd2,
	0x36, 0x1c, 0xc7, 0x30, 0x08, 0xda, 0xc9, 0xde, 0xe6, 0xd0, 0xbc, 0x75, 0x52, 0xe4, 0x4f, 0x01,
	0x6e, 0xfe, 0x6d, 0x64, 0x65, 0x8c, 0xec, 0x21, 0xc0, 0xc8, 0xaa, 0xe0, 0xd6, 0x4e, 0x0a, 0x4c,
	0xe0, 0xa0, 0x71, 0xd6, 0xc9, 0x7e, 0x3e, 0x87, 0xf1, 0x2e, 0x29, 0x8e, 0xa0, 0xcf, 0xd7, 0xb2,
	0x87, 0x13, 0x18, 0x5a, 0x0e, 0xe7, 0xd7, 0x52, 0x2c, 0x7f, 0x08, 0x80, 0xd7, 0xcf, 0xaf, 0x3c,
	0xd5, 0x1f, 0x2b, 0x4d, 0xf8, 0x12, 0x92, 0x76, 0xa5, 0xf0, 0x61, 0x0c, 0x78, 0x67, 0xc3, 0x66,
	0x0f, 0xb6, 0xb5, 0xdf, 0xea, 0x50, 0x26, 0xbf, 0xfc, 0xfa, 0xfd, 0xbd, 0x0f, 0xd9, 0xb0, 0x60,
	0x47, 0xf6, 0x4c, 0xe4, 0xf8, 0x0a, 0x26, 0xdd, 0x34, 0xf1, 0x51, 0xfc, 0x73, 0x77, 0xba, 0xff,
	0x46, 0xdd, 0x8f, 0xa8, 0x7b, 0xd9, 0xa8, 0xd0, 0x1b, 0xff, 0x99, 0xc8, 0xdf, 0x8c, 0xe2, 0xc6,
	0x3d, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x50, 0x16, 0x1f, 0x25, 0x23, 0x03, 0x00, 0x00,
}
